from .centroid_build import centroid_build
from .conversion import conversion

ef buffer(*args):
    
    river = [[],[]]
    merged_buffer = None
    
    if len(args) == 2:
        name = args[0]
        geometries = ox.geometries_from_place(name, tags={'waterway' : 'river'}) 
        y_max, y_min = centroid_build(name)['y_km'].max(), centroid_build(name)['y_km'].min()
        x_max, x_min = centroid_build(name)['x_km'].max(), centroid_build(name)['x_km'].min()

    elif len(args) == 5:
        geometries = ox.geometries_from_bbox(args[0], args[1], args[2], args[3], tags={'waterway' : 'river'})
        y_max, y_min = centroid_build(args[0], args[1], args[2], args[3])['y_km'].max(), centroid_build(args[0], args[1], args[2], args[3])['y_km'].min()
        x_max, x_min = centroid_build(args[0], args[1], args[2], args[3])['x_km'].max(), centroid_build(args[0], args[1], args[2], args[3])['x_km'].min()
    else:
            print('Invalid arguments passed. Either -')
            print('        2 values: The name of a given area, value for') #, km buffer distance, number of buffers')
            print('        5 values: lat1, lat2, lon1, lon2, km buffer distance') #, number of buffers') 
            
    
    for i in list(range(len(geometries['geometry']))): #River coordinates
        river_geometry = geometries['geometry'].iloc[i]
        coords = list(river_geometry.coords)
        float_coords = [(float(x), float(y)) for x,y in coords]
        r = np.array(float_coords).T
        r = pd.DataFrame(r).T
        geometry = [Point(x, y) for x, y in zip(r[0], r[1])]
        r = gpd.GeoDataFrame(r, geometry = geometry)
        r_y, r_x = conversion(r[1],r[0])
        r = r_x, r_y
    
        r = pd.DataFrame(r).T
        geometry = [Point(x, y) for x, y in zip(r['Unnamed 0'], r[1])]
        r = gpd.GeoDataFrame(r, geometry = geometry)
        
        points = gpd(map(Point, r['geometry']))
    
        line = LineString(points.tolist())
        buffer = line.buffer(args[-1]) 
        if merged_buffer is None:
            merged_buffer = buffer
        else:
            merged_buffer = merged_buffer.union(buffer)
        
        river[0] = np.append(river[0], r['Unnamed 0'])
        river[1] = np.append(river[1], r[1])
        
    boundaries = []
    if isinstance(merged_buffer, MultiPolygon):
        for polygon in merged_buffer.geoms:
            x, y = polygon.exterior.xy
            boundaries.append((x,y))
    else:
        x, y = merged_buffer.exterior.xy
        boundaries.append((x,y))
        return boundaries
#    for x, y in boundaries:
#        plt.plot(x,y)
#        plt.xlim(x_min, x_max)
#        plt.ylim(y_min, y_max)
